from netmiko import ConnectHandler

# device details
device = {
    'device_type': 'cisco_ios', 
    'host': '192.168.56.101',
    'username': 'cisco',
    'password': 'cisco123!',
    'secret': 'class123!'
}

# hardening checks
hardening_check = {
    'Password Encryption': 'service password-encryption',
    'SSH Enabled': 'transport input ssh',
    'IP domain lookup': 'no ip domain-lookup',
    'EXEC timeout': 'exec-timeout',
    'Syslog Server Configured': 'logging host',
    'NTP Authentication': 'ntp authentication-key',
    'HTTP Server Disabled': 'no ip http server',
}

def check_hardening(running_config):
    """Perform hardening checks on the running configuration."""
    for check, rule in hardening_check.items():
        status = "[PASS]" if rule in running_config else "[FAIL]"
        print(f"{status} {check}")

def syslog_configuration(session):
    """Configure syslog on the device."""
    try:
        syslogServerIp = '192.168.56.101'
        syslogPort = '54'
        facility_level = ['auth', 'syslog']
        trap_level = ['error', 'warning', 'informational']
        commands = [
            f'logging host {syslogServerIp} {syslogPort}',
            f"logging facility {' '.join(facility_level)}",
            f"logging trap {' '.join(trap_level)}"
        ]
        session.send_config_set(commands)
        print('Syslog configuration set successfully')
    except Exception as e:
        print(f'Error: {e}')

# Create session 
session = ConnectHandler(**device)
print("Session created successfully.")

# retrieve running config
running_config = session.send_command('show running-config')
with open('running_config.txt', 'w') as file:
    file.write(running_config)

print("Running configuration saved.")

# perform hardening checks
check_hardening(running_config)

# configure syslog
syslog_configuration(session)

# disconnect session
session.disconnect()
print("Session closed successfully.")
